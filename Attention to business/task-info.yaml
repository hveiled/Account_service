type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'

        // https://mvnrepository.com/artifact/com.h2database/h2
        implementation group: 'com.h2database', name: 'h2', version: '1.4.200'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        compileOnly 'org.projectlombok:lombok:1.18.22'
        implementation 'javax.validation:validation-api:2.0.1.Final'
        implementation 'org.javassist:javassist:3.28.0-GA'
        implementation 'io.springfox:springfox-swagger-ui:3.0.0'
        implementation 'org.webjars:swagger-ui:4.1.0'



    }
  learner_created: false
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {
        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
    spring.h2.console.enabled=true
    spring.datasource.driverClassName=org.h2.Driver
    spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
    spring.jpa.hibernate.ddl-auto=update
    spring.h2.console.path=/h2
    spring.datasource.url=jdbc:h2:file:../service_db
    spring.datasource.username=sa
    spring.datasource.password=
    spring.jpa.open-in-view=false
    server.error.include-message=always
  learner_created: false
- name: src/account/controller/AccountController.java
  visible: true
  text: |
    package account.controller;

    import account.model.User;
    import account.service.UserAuthenticationService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.context.SecurityContextHolder;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.PutMapping;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    public class AccountController {

        @Autowired
        UserAuthenticationService service;


        @GetMapping("api/empl/payment")
        public User payment() {
            return service.getPayment();
        }

        @PostMapping("api/acct/payments")
        public void uploadPayments() {

        }

        @PutMapping("api/acct/payments")
        public void updatePayments() {

        }

    }
  learner_created: false
- name: src/account/service/AccountService.java
  visible: true
  text: |
    package account.service;

    import org.springframework.stereotype.Service;

    @Service
    public class AccountService {

    }
  learner_created: false
- name: src/account/model/NewPassword.java
  visible: true
  text: |
    package account.model;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.*;

    import javax.validation.constraints.Size;

    public class NewPassword {

        @Size(min = 12, message = "The password length must be at least 12 chars!")
        @JsonProperty("new_password")
        private String password;

        public NewPassword(String password) {
            this.password = password;
        }

        public NewPassword() {
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }
    }
  learner_created: false
- name: src/account/model/User.java
  visible: true
  text: |
    package account.model;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import lombok.*;
    import org.hibernate.annotations.Fetch;
    import org.hibernate.annotations.FetchMode;
    import org.hibernate.annotations.Proxy;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;

    import javax.persistence.*;
    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;
    import javax.validation.constraints.Size;
    import java.util.*;

    @ToString
    @RequiredArgsConstructor
    @Entity
    //@Data
    @Proxy(lazy = false)
    public class User {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        @Column(name = "user_id", nullable = false)
        @JsonProperty("id")
        private Long id;

        @NotNull
        @NotEmpty
        @Column(name = "name")
        @JsonProperty("name")
        private String name;

        @NotNull
        @NotEmpty
        @Column(name = "last_name")
        @JsonProperty("lastname")
        private String lastname;

        @NotNull
        @NotEmpty
        @Pattern(regexp = "\\w+@acme.com", message = "Invalid email")
        @Column(name = "email")
        @JsonProperty("email")
        private String email;

        @NotNull
        @NotEmpty
        @JsonProperty("password")
        @JsonIgnore
        @Column(name = "password")
        @Size(min = 12)
        private String password;

        @Column(name = "role")
        @ElementCollection(fetch = FetchType.EAGER)
        @JsonIgnore
        private Set<String> role = new HashSet<>();

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastname) {
            this.lastname = lastname;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        @JsonIgnore
        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public Set<String> getRole() {
            return role;
        }

        public void setRole(Set<String> role) {
            this.role = role;
        }
    }
  learner_created: false
- name: src/account/model/UserDetailsImpl.java
  visible: true
  text: |
    package account.model;

    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;
    import java.util.Collection;
    import java.util.Locale;
    import java.util.Set;
    import java.util.logging.Logger;
    import java.util.stream.Collectors;

    public class UserDetailsImpl implements UserDetails {

        private final String username;
        private final String name;
        private final String lastname;
        private final String password;
        private final String email;
        private final Collection<SimpleGrantedAuthority> authorities;

        public UserDetailsImpl(User user) {
            this.username = user.getEmail().toLowerCase(Locale.ROOT);
            this.name = user.getName();
            this.lastname = user.getLastname();
            this.password = user.getPassword();
            this.email = user.getEmail().toLowerCase(Locale.ROOT);
            Set<String> auth = user.getRole();
            this.authorities = auth.stream().map(SimpleGrantedAuthority::new).collect(Collectors.toSet());
        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return authorities;
        }

        @Override
        public String getPassword() {
            return password;
        }

        @Override
        public String getUsername() {
            return username;
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }

        public String getLastname() {
            return lastname;
        }

        public String getEmail() {
            return email;
        }

        public String getName() {
            return name;
        }
    }
  learner_created: false
- name: src/account/service/UserDetailsServiceImpl.java
  visible: true
  text: |
    package account.service;

    import account.model.User;
    import account.model.UserDetailsImpl;
    import account.repository.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.stereotype.Service;

    import java.util.Locale;
    import java.util.Optional;

    @Service
    public class UserDetailsServiceImpl implements UserDetailsService {

        @Autowired
        UserRepository userRepo;

        @Override
        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
            User user = userRepo.findByEmail(username.toLowerCase(Locale.ROOT)).orElseThrow(() -> new UsernameNotFoundException(username));
            return new UserDetailsImpl(user);
        }
    }
  learner_created: false
- name: src/account/repository/UserRepository.java
  visible: true
  text: |
    package account.repository;

    import account.model.User;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;
    import java.util.Optional;

    @Repository
    public interface UserRepository extends CrudRepository<User, Long> {
        Optional<User> findByName(String name);
        Optional<User> findByEmail(String email);
        boolean existsByEmail(String email);
        boolean existsByNameAndLastname(String name, String lastname);
        boolean existsByRole(String role);
    }
  learner_created: false
- name: src/account/security/SecurityConfig.java
  visible: true
  text: |
    package account.security;

    import account.service.UserDetailsServiceImpl;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;

    @EnableWebSecurity
    public class SecurityConfig extends WebSecurityConfigurerAdapter {

        @Autowired
        UserDetailsServiceImpl userDetailsService;

        @Autowired
        RestAuthenticationEntryPoint restAuthenticationEntryPoint;

        @Override
        protected void configure(AuthenticationManagerBuilder auth) throws Exception {
            auth
                    .authenticationProvider(authenticationProvider());
        }

        @Override
        protected void configure(HttpSecurity http) throws Exception {
            http
                    .csrf().disable().headers().frameOptions().disable() // for Postman, the H2 console
                    .and()
                    .authorizeRequests() // manage access
    //                .mvcMatchers(HttpMethod.POST, "/api/auth/changepass").hasAnyRole("USER", "ACCOUNTANT", "ADMIN")
    //                .mvcMatchers(HttpMethod.GET, "/api/empl/payment").hasAnyRole("USER", "ACCOUNTANT")
    //                .mvcMatchers( "/api/acct/**").hasAnyRole("ACCOUNTANT")
    //                .mvcMatchers( "/api/admin/**").hasAnyRole("ADMIN")
    //                .and()
    //                .authorizeRequests()
                    .mvcMatchers(HttpMethod.POST, "/api/auth/changepass").authenticated()
                    .mvcMatchers(HttpMethod.GET, "/api/empl/payment").authenticated()
                    .mvcMatchers( "/api/acct/**").authenticated()
                    .mvcMatchers( "/api/admin/**").authenticated()
                    .mvcMatchers("/api/auth/signup", "/h2").permitAll()
                    .and()
                    .httpBasic()
                    .authenticationEntryPoint(restAuthenticationEntryPoint) // Handle auth error
                    .and()
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS); // no session
        }

        @Bean
        public DaoAuthenticationProvider authenticationProvider(){
            DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
            provider.setPasswordEncoder(getEncoder());
            provider.setUserDetailsService(userDetailsService);
            return provider;
        }

        @Bean
        PasswordEncoder getEncoder() {
            return new BCryptPasswordEncoder();
        }
    }
  learner_created: false
- name: src/account/controller/UserFunctionalityController.java
  visible: true
  text: |
    package account.controller;

    import account.model.User;
    import account.repository.UserRepository;
    import account.service.UserAuthenticationService;
    import lombok.RequiredArgsConstructor;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.web.bind.annotation.*;

    import java.util.Locale;

    @RestController
    //@RequiredArgsConstructor
    @RequestMapping("/api/admin")
    public class UserFunctionalityController {

        private final UserAuthenticationService service;

        @Autowired
        public UserFunctionalityController(UserAuthenticationService service) {
            this.service = service;
        }


        @PutMapping("/role")
        public void changeRole(@RequestParam String username, @RequestParam String role) {
            service.addRole(username, role);
        }

        @DeleteMapping("/user")
        public void deleteUser() {

        }

        @GetMapping("/user")
        public void getUsers() {

        }
    }
  learner_created: false
- name: src/account/security/RestAuthenticationEntryPoint.java
  visible: true
  text: |
    package account.security;

    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import javax.servlet.ServletException;
    import javax.servlet.http.HttpServletRequest;
    import javax.servlet.http.HttpServletResponse;
    import java.io.IOException;

    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {
        @Override
        public void commence(HttpServletRequest request, HttpServletResponse response,
                             AuthenticationException authException) throws IOException, ServletException {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
    }
  learner_created: false
- name: src/account/service/UserAuthenticationService.java
  visible: true
  text: |
    package account.service;

    import account.model.NewPassword;
    import account.model.User;
    import account.model.UserDetailsImpl;
    import account.repository.UserRepository;
    import org.aspectj.bridge.IMessage;
    import org.aspectj.bridge.IMessageHolder;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.core.Authentication;
    import org.springframework.security.core.authority.AuthorityUtils;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.context.SecurityContextHolder;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Component;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;

    import java.util.*;
    import java.util.stream.Collectors;

    @Service
    @Component
    public class UserAuthenticationService {

        @Autowired
        UserRepository userRepo;

        @Autowired
        PasswordEncoder passwordEncoder;

        public User signUp(User user) {
            Set<String> breachedPasswords = Set.of("PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch", "PasswordForApril",
                    "PasswordForMay", "PasswordForJune", "PasswordForJuly", "PasswordForAugust",
                    "PasswordForSeptember", "PasswordForOctober", "PasswordForNovember", "PasswordForDecember");
            boolean corruptedPassword = breachedPasswords.contains(user.getPassword());
            if (breachedPasswords.contains(user.getPassword())) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The password is in the hacker's database!");
            }
            if (userRepo.existsByEmail(user.getEmail().toLowerCase(Locale.ROOT))) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "User exist!");
            }
            Set<String> role = new HashSet<>();
            if (!userRepo.existsByRole("ADMIN")) {
                role.add("ADMIN");
            }
            role.add("USER");
            user.setRole(role);
            user.setEmail(user.getEmail().toLowerCase(Locale.ROOT));
            user.setPassword(passwordEncoder.encode(user.getPassword()));
            return userRepo.save(user);
        }

        public User getPayment() {
            UserDetailsImpl userDetails = (UserDetailsImpl) SecurityContextHolder
                    .getContext().getAuthentication().getPrincipal();
    //        System.out.println("Hooooo Hoooh: " + userDetails.getUsername());
            return userRepo.findByEmail(userDetails.getUsername()).orElseThrow(() ->
                    new ResponseStatusException(HttpStatus.BAD_REQUEST));
        }

        public void addRole(String username, String role) {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            boolean hasAdminRole = authentication.getAuthorities().stream()
                    .anyMatch(r -> r.getAuthority().equals("ROLE_ADMIN"));
            if (!hasAdminRole) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Administrator permissions required!");
            }
            User user = userRepo.findByEmail(username).orElseThrow(() -> new UsernameNotFoundException(username));
            Set<String> newRoles = user.getRole();
            newRoles.add(role);
            user.setRole(newRoles);
            userRepo.save(user);
        }

        public Map<String, String> changeUserPassword(NewPassword password) {

            Set<String> breachedPasswords = Set.of("PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch", "PasswordForApril",
                    "PasswordForMay", "PasswordForJune", "PasswordForJuly", "PasswordForAugust",
                    "PasswordForSeptember", "PasswordForOctober", "PasswordForNovember", "PasswordForDecember");
            if (breachedPasswords.contains(password.getPassword())) {
                System.out.println("breached pass: " + password.getPassword());
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The password is in the hacker's database!");
            }
            UserDetailsImpl userDetails = (UserDetailsImpl) SecurityContextHolder.getContext()
                    .getAuthentication().getPrincipal();
            User user = userRepo.findByEmail(userDetails.getUsername()).orElseThrow();
            if (passwordEncoder.matches(password.getPassword(), user.getPassword())) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "The passwords must be different!");
            }
            user.setPassword(passwordEncoder.encode(password.getPassword()));
            User savedUser = userRepo.save(user);
            return Map.of("email", savedUser.getEmail(), "status", "The password has been updated successfully");
        }
    }
  learner_created: false
- name: src/account/controller/AuthenticationController.java
  visible: true
  text: |
    package account.controller;

    import account.model.NewPassword;
    import account.model.User;
    import account.service.UserAuthenticationService;
    import lombok.AllArgsConstructor;
    import lombok.NoArgsConstructor;
    import lombok.RequiredArgsConstructor;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;
    import javax.validation.Valid;
    import javax.validation.constraints.NotNull;
    import java.util.Map;

    @RestController
    @RequestMapping("/api/auth")
    public class AuthenticationController {

        private final UserAuthenticationService userAuthService;

        @Autowired
        public AuthenticationController(UserAuthenticationService userAuthService) {
            this.userAuthService = userAuthService;
        }

        @PostMapping("/signup")
        public User signup(@Valid @NotNull @RequestBody User user) {
            return userAuthService.signUp(user);
        }

        @PostMapping("/changepass")
        public Map<String, String> changePass(@Valid @RequestBody NewPassword newPassword) {
            return userAuthService.changeUserPassword(newPassword);
        }
    }
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |-
    import account.AccountServiceApplication;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.ArrayList;
    import java.util.LinkedHashMap;
    import java.util.List;
    import java.util.Map;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isInteger;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;

    class TestReq {

      private Map<String, Object> properties = new LinkedHashMap<>();

      // Deep copy
      public TestReq(TestReq another) {
        this.properties = another.properties.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
      }

      public TestReq() {
      }

      public String toJson() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        try {
          return mapper.writeValueAsString(this.properties);
        } catch (JsonProcessingException e) {
          System.out.println(e.getMessage());
          return null;
        }
      }

      public TestReq setProps(String key, Object value) {
        properties.put(key, value);
        return this;
      }

    }

    public class AccountServiceTest extends SpringTest {

      private  final String signUpApi = "/api/auth/signup";
      private  final String changePassApi = "/api/auth/changepass";
      private  final String getEmployeePaymentApi = "/api/empl/payment";
      private final String postPaymentApi = "api/acct/payments";


      static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
              "PasswordForApril", "PasswordForMay", "PasswordForJune",
              "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
              "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};

      List<Integer> userIdList = new ArrayList<>();

      private final TestReq johnDoe = new TestReq().setProps("name", "John")
              .setProps("lastname", "Doe")
              .setProps("email", "JohnDoe@acme.com")
              .setProps("password", "oMoa3VvqnLxW");
      private final TestReq maxMus = new TestReq().setProps("name", "Max")
              .setProps("lastname", "Mustermann")
              .setProps("email", "MaxMustermann@acme.com")
              .setProps("password", "ai0y9bMvyF6G");
      private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
              .setProps("lastname", "Nemo")
              .setProps("email", "nautilus@pompilius.com")
              .setProps("password", "wings");

      private final String jDCorrectUser = johnDoe.toJson();
      private final String jDEmptyName = new TestReq(johnDoe).setProps("name", "").toJson();
      private final String jDNoName = new TestReq(johnDoe).setProps("name", null).toJson();
      private final String jDEmptyLastName = new TestReq(johnDoe).setProps("lastname", "").toJson();
      private final String jDNoLastName = new TestReq(johnDoe).setProps("lastname", null).toJson();
      private final String jDEmptyEmail = new TestReq(johnDoe).setProps("email", "").toJson();
      private final String jDNoEmail = new TestReq(johnDoe).setProps("email", null).toJson();
      private final String jDEmptyPassword = new TestReq(johnDoe).setProps("password", "").toJson();
      private final String jDNoPassword = new TestReq(johnDoe).setProps("password", null).toJson();
      private final String jDWrongEmail1 = new TestReq(johnDoe).setProps("email", "johndoeacme.com").toJson();
      private final String jDWrongEmail2 = new TestReq(johnDoe).setProps("email", "johndoe@google.com").toJson();
      private final String maxMusCorrectUser = maxMus.toJson();
      private final String jDLower = new TestReq(johnDoe).setProps("email", "johndoe@acme.com").toJson();
      private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
      private final String jDWrongPassword = new TestReq(johnDoe).setProps("password", "none").toJson();
      private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
      private final String captainNemoWrongUser = captainNemo.toJson();
      private final String jDNewPass = new TestReq(johnDoe).setProps("password", "aNob5VvqzRtb").toJson();

      private final String jDDuplicatePass = new TestReq().setProps("new_password", "oMoa3VvqnLxW").toJson();
      private final String jDShortPass = new TestReq().setProps("new_password", "oMoa3Vvqn").toJson();
      private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();

      private String paymentsList = convert(new String[]{
              new TestReq().setProps("employee", "johndoe@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 123456).toJson(),
              new TestReq().setProps("employee", "johndoe@acme.com").setProps("period", "02-2021")
                      .setProps("salary", 456789).toJson(),
              new TestReq().setProps("employee", "johndoe@acme.com").setProps("period", "03-2021")
                      .setProps("salary", 12).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 54321).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "02-2021")
                      .setProps("salary", 987654).toJson(),
              new TestReq().setProps("employee", "maxmustermann@acme.com").setProps("period", "03-2021")
                      .setProps("salary", 120).toJson()
      });
      private String wrongPaymentListData = convert(new String[]{new TestReq().setProps("employee", "johndoe@acme.com")
              .setProps("period", "13-2021").setProps("salary", 123456).toJson()});


      private  String wrongPaymentListSalary = new TestReq().setProps("employee", "johndoe@acme.com")
              .setProps("period", "13-2021").setProps("salary", -1).toJson();

      private String wrongPaymentListDuplicate = convert(new String[]{
              new TestReq().setProps("employee", "johndoe@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 123456).toJson(),
              new TestReq().setProps("employee", "johndoe@acme.com").setProps("period", "01-2021")
                      .setProps("salary", 456789).toJson()
      });
      private String updatePayment = new TestReq().setProps("employee", "johndoe@acme.com").setProps("period", "01-2021")
              .setProps("salary", 77777).toJson();
      private String updatePaymentResponse = new TestReq().setProps("name", "John").setProps("lastname", "Doe")
              .setProps("period", "January-2021").setProps("salary", "777 dollar(s) 77 cent(s)").toJson();
      private String updatePaymentWrongDate = new TestReq().setProps("employee", "johndoe@acme.com")
              .setProps("period", "13-2021").setProps("salary", 1234567).toJson();
      private String updatePaymentWrongSalary = new TestReq().setProps("employee", "johndoe@acme.com")
              .setProps("period", "13-2021").setProps("salary", -1).toJson();
      private String correctPaymentResponse = convert(new String[]{
              new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("period", "March-2021").setProps("salary", "0 dollar(s) 12 cent(s)").toJson(),
              new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("period", "February-2021").setProps("salary", "4567 dollar(s) 89 cent(s)").toJson(),
              new TestReq().setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("period", "January-2021").setProps("salary", "1234 dollar(s) 56 cent(s)").toJson()
      });

      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      private String convert(String[] trs) {
        JsonArray  jsonArray = new JsonArray();
        for (String tr : trs) {
          JsonElement jsonObject = JsonParser.parseString(tr);
          jsonArray.add(jsonObject);
        }
        return jsonArray.toString();
      }

      /**
       * Method for checking status code of response Post request for API
       *
       * @param api testing api (String)
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostApi(String api, String body, int status, String message) {
        HttpResponse response = post(api, body).send();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }
        return CheckResult.correct();
      }

      CheckResult testPostApiWithAuth(String api, String body, int status, String login, String pass, String message) {
        HttpResponse response = post(api, body).basicAuth(login, pass).send();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking status code of response Get request for API
       *
       * @param api testing api (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testGetApi(String api, int status, String message) {
        HttpResponse response = get(api).send();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("GET " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message);
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking status code of response Get request for API
       *
       * @param api testing api (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @param login login
       * @param password password
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testGetApiAuth(String api, int status, String login, String password, String message) {
        HttpResponse response = get(api).basicAuth(login, password).send();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("GET " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message);
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking response on Post request for signup API
       *
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostSignUpResponse(String body, int status) {
        HttpResponse response = post(signUpApi, body).send();
        testPostApi(signUpApi, body, status, "API must be available");

        JsonObject rightResponse = getJson(body).getAsJsonObject();
        rightResponse.remove("password");

        // Check is it JSON in response or something else
        if (!response.getJson().isJsonObject()) {
          return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonObject jsonResponse = response.getJson().getAsJsonObject();

        // Check if password is presence in response
        if (jsonResponse.get("password") != null) {
          return CheckResult.wrong("You must remove password from response\n" +
                  jsonResponse);
        }

        if (!jsonResponse.get("email").getAsString().endsWith("@acme.com")) {
          return CheckResult.wrong("Service must accept only corporate emails that end with @acme.com\n" +
                  jsonResponse);
        }

        if (jsonResponse.get("id") == null) {
          return CheckResult.wrong("Response must contain user ID\n" +
                  "Received response:\n" +
                  jsonResponse);
        }

        if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
          return CheckResult.wrong("User ID must be unique!\n" +
                  "Received response:\n" +
                  jsonResponse);
        }
        rightResponse.addProperty("id", jsonResponse.get("id").toString());
        // Check JSON in response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("id", isInteger())
                        .value("name", rightResponse.get("name").getAsString())
                        .value("lastname", rightResponse.get("lastname").getAsString())
                        .value("email", rightResponse.get("email").getAsString().toLowerCase()));
        userIdList.add(jsonResponse.get("id").getAsInt());
        return CheckResult.correct();
      }


      /**
       * Method for restarting application
       *
       */
      private CheckResult restartApplication() {
        try {
          reloadSpring();
        } catch (Exception ex) {
          throw new UnexpectedError(ex.getMessage());
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking authentication
       *
       * @param user string representation of user information in JSON format (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserRegistration(String user, int status, String message) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String password = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();
        HttpResponse response = get(getEmployeePaymentApi).basicAuth(login, password).send();
        if (response.getStatusCode() != status) {
          return CheckResult.wrong("Get " + getEmployeePaymentApi + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Authentication with " + login + " / " + password);
        }
        return CheckResult.correct();
      }

      CheckResult testChangePassword(String api, String body, int status, String user) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String pass = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();
        HttpResponse response = post(api, body).basicAuth(login, pass).send();
        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }
        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("email", userJson.get("email").getAsString().toLowerCase())
                          .value("status", "The password has been updated successfully"));
        }
        return CheckResult.correct();
      }

      /**
       * Method for testing duplicate users
       *
       * @param user string representation of user information in JSON format (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserDuplicates(String user) {
        HttpResponse response = post(signUpApi, user).send();
        // Check error message field in JSON response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("status", 400)
                        .value("error", "Bad Request")
                        .value("message", "User exist!")
                        .anyOtherValues());
        return CheckResult.correct();
      }

      private CheckResult testBreachedPass(String api, String login, String password, String body, String message) {
        JsonObject json = getJson(body).getAsJsonObject();
        HttpResponse response;
        for (int index = 0; index < breachedPass.length; index++) {
          if (json.has("password")) {
            json.remove("password");
            json.addProperty("password", breachedPass[index]);
          } else if (json.has("new_password")) {
            json.remove("new_password");
            json.addProperty("new_password", breachedPass[index]);
          }
          if (login.isEmpty() || password.isEmpty()) {
            response = post(api, json.toString()).send();
          } else {
            response = post(api, json.toString()).basicAuth(login, password).send();
          }

          if (response.getStatusCode() != 400) {
            return CheckResult.wrong("POST " + api + " should respond with "
                    + "status code 400 , responded: " + response.getStatusCode() + "\n"
                    + "Response body:\n" + response.getContent() + "\n"
                    + "Request body:\n" + json.toString() + "\n"
                    + message);
          }
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", 400)
                          .value("error", "Bad Request")
                          .value("message", "The password is in the hacker's database!")
                          .anyOtherValues());

        }
        return CheckResult.correct();
      }


      CheckResult testPostPaymentResponse(String body, int status, String message) {
        HttpResponse response = post(postPaymentApi, body).send();
        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + postPaymentApi + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", "Added successfully!")
                          .anyOtherValues());
        }
        if (response.getStatusCode() == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", "Bad Request")
                          .value("path", "/api/acct/payments")
                          .value("status", 400)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testPutPaymentResponse(String body, int status, String message) {
        HttpResponse response = put(postPaymentApi, body).send();
        if (response.getStatusCode() != status) {
          return CheckResult.wrong("PUT " + postPaymentApi + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("status", "Updated successfully!")
                          .anyOtherValues());
        }
        if (response.getStatusCode() == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", "Bad Request")
                          .value("path", "/api/acct/payments")
                          .value("status", 400)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testGetPaymentResponse(String user, int status, String correctResponse, String message) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String password = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();
        HttpResponse response = get(getEmployeePaymentApi).basicAuth(login, password).send();
        JsonArray correctJson = getJson(correctResponse).getAsJsonArray();
        JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + getEmployeePaymentApi + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }

        if (responseJson.size() == 0)  {
          return CheckResult.wrong("Payments was not added " + "\n"
                  + "endpoint " + getEmployeePaymentApi + "\n"
                  + "responded with " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }

        if (correctJson.size() != responseJson.size()) {
          return CheckResult.wrong("New data should not be added" + "\n"
                  + "in response " + getPrettyJson(responseJson)  + "\n"
                  + "must be " + getPrettyJson(correctJson));
        }

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          for (int i = 0; i < responseJson.size(); i++) {
            if (!responseJson.get(i).equals(correctJson.get(i))) {
              return CheckResult.wrong("Get " + getEmployeePaymentApi  +" wrong data in response body" + "\n"
                      + "in response " + getPrettyJson(responseJson) + "\n"
                      + "must be " + getPrettyJson(correctJson));
            }
          }
        }
    //    if (response.getStatusCode() == 400) {
    //      expect(response.getContent()).asJson().check(
    //              isObject()
    //                      .value("error", "Bad Request")
    //                      .value("path", "/api/acct/payments")
    //                      .value("status", 400)
    //                      .anyOtherValues());
    //    }
        return CheckResult.correct();
      }

      CheckResult testGetPaymentResponseParam(String user, int status, String request, String correctResponse, String message) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String password = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString().toLowerCase();
        JsonObject json = getJson(correctResponse).getAsJsonObject();
        JsonObject jsonRequest = getJson(request).getAsJsonObject();
        String param = jsonRequest.get("period").getAsString();
        HttpResponse response = get(getEmployeePaymentApi).addParam("period", param).basicAuth(login, password).send();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("GET " + getEmployeePaymentApi + "?period=" + param + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          if (!response.getJson().equals(json)) {
            return CheckResult.wrong("Get " + getEmployeePaymentApi  + "?period=" + param
                    + " wrong data in response body" + "\n"
                    + "in response " + getPrettyJson(response.getJson()) + "\n"
                    + "must be " + getPrettyJson(json));
          }
        }

        if (response.getStatusCode() == 400) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", "Bad Request")
                          .value("path", "/api/empl/payment")
                          .value("status", 400)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[] {
              // Test wrong POST request for signup api
              () -> testPostApi(signUpApi, jDEmptyName, 400, "Empty name field!"),
              () -> testPostApi(signUpApi, jDNoName, 400, "Name field is absent!"),
              () -> testPostApi(signUpApi, jDEmptyLastName, 400, "Empty lastname field!"),
              () -> testPostApi(signUpApi, jDNoLastName, 400, "Lastname field is absent!"),
              () -> testPostApi(signUpApi, jDEmptyEmail, 400, "Empty email field!"),
              () -> testPostApi(signUpApi, jDNoEmail, 400, "Email field is absent!"),
              () -> testPostApi(signUpApi, jDEmptyPassword, 400, "Empty password field!"),
              () -> testPostApi(signUpApi, jDNoPassword, 400, "Password field is absent!"),
              () -> testPostApi(signUpApi, jDWrongEmail1, 400, "Wrong email!"),
              () -> testPostApi(signUpApi, jDWrongEmail2, 400, "Wrong email!"),
              // Test user registration on signup api
              () -> testBreachedPass(signUpApi, "", "",
                      jDCorrectUser, "Sending password from breached list"),
              () -> testPostSignUpResponse(jDCorrectUser, 200),
              () -> testPostApi(signUpApi, jDCorrectUser, 400, "User must be unique!"),
              () -> testUserDuplicates(jDCorrectUser),
              () -> testPostApi(signUpApi, jDLower, 400, "User must be unique (ignorecase)!"),
              () -> testPostSignUpResponse(maxMusLower, 200),
              () -> testPostApi(signUpApi, maxMusLower, 400, "User must be unique!"),
              () -> testPostApi(signUpApi, maxMusCorrectUser, 400, "User must be unique (ignorecase)!"),
              // Test authentication, positive tests
              () -> testUserRegistration(jDLower, 200, "User must login!"),
              () -> testUserRegistration(jDCorrectUser, 200, "Login case insensitive!"),
              () -> testUserRegistration(maxMusLower, 200, "User must login!"),
              () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"),
              // Test authentication, negative tests
              () -> testUserRegistration(jDWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(jDWrongEmail1, 401, "Wrong user!"),
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"),
              () -> testGetApi(getEmployeePaymentApi, 401, "This api only for authenticated user"),

              // Test changing password
              () -> testPostApi(changePassApi, jDDuplicatePass, 401, "This api only for authenticated user"),
              () -> testPostApiWithAuth(changePassApi, jDShortPass, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The password length must be at least 12 chars!"),
              () -> testPostApiWithAuth(changePassApi, jDDuplicatePass, 400,
                      "JohnDoe@acme.com", "oMoa3VvqnLxW", "The passwords must be different!"),
              () -> testBreachedPass(changePassApi, "JohnDoe@acme.com", "oMoa3VvqnLxW",
                      jDDuplicatePass, "Sending password from breached list"),
              () -> testChangePassword(changePassApi,jDPass, 200, jDCorrectUser),
              () -> testGetApiAuth(getEmployeePaymentApi, 401,"JohnDoe@acme.com", "oMoa3VvqnLxW", "Password must be changed!"),
              () -> testGetApiAuth(getEmployeePaymentApi, 200,"JohnDoe@acme.com", "aNob5VvqzRtb", "Password must be changed!"),

              // Test persistence
              () -> restartApplication(),
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                      " Check persistence."),
              // Test business logic
              () -> testPostPaymentResponse(paymentsList, 200, "Payment list must be added"),
              () -> testGetPaymentResponse(jDNewPass, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testPostPaymentResponse(wrongPaymentListSalary, 400, "Wrong salary in payment list"),
              () -> testGetPaymentResponse(jDNewPass, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testPostPaymentResponse(wrongPaymentListData, 400, "Wrong data in payment list"),
              () -> testGetPaymentResponse(jDNewPass, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testPostPaymentResponse(wrongPaymentListDuplicate, 400, "Duplicated entry in payment list"),
              () -> testGetPaymentResponse(jDNewPass, 200, correctPaymentResponse,
                      "Wrong status code!"),
              () -> testPutPaymentResponse(updatePaymentWrongDate, 400,"Wrong date in request body!"),
              () -> testPutPaymentResponse(updatePaymentWrongSalary, 400, "Wrong salary in request body!"),
              () -> testPutPaymentResponse(updatePayment, 200, "Salary must be update!"),
              () -> testGetPaymentResponseParam(jDNewPass, 200, updatePayment, updatePaymentResponse,
                      "Salary must be update!"),
              () -> testGetPaymentResponseParam(jDNewPass, 400, updatePaymentWrongDate, updatePaymentResponse,
                      "Wrong date in request!"),
      };
    }
  learner_created: false
- name: src/account/model/Payment.java
  visible: true
  learner_created: true
- name: src/account/repository/AccountRepo.java
  visible: true
  learner_created: true
- name: src/account/exception/CustomErrorHandler.java
  visible: true
  learner_created: true
- name: src/account/model/Payroll.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/217/stages/1089/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 30 Nov 2021 13:13:28 UTC
record: 4
