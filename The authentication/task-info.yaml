type: edu
files:
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'

        // https://mvnrepository.com/artifact/com.h2database/h2
        implementation group: 'com.h2database', name: 'h2', version: '1.4.200'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        compileOnly 'org.projectlombok:lombok:1.18.22'
        implementation 'javax.validation:validation-api:2.0.1.Final'
        implementation 'org.javassist:javassist:3.28.0-GA'

    }
  learner_created: false
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {
        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
    spring.h2.console.enabled=true
    spring.datasource.driverClassName=org.h2.Driver
    spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
    spring.jpa.hibernate.ddl-auto=create-drop
    spring.h2.console.path=/h2
    spring.datasource.url=jdbc:h2:file:../account_db
    spring.datasource.username=sa
    spring.datasource.password=
    spring.jpa.open-in-view=false
  learner_created: false
- name: src/account/controller/AuthenticationController.java
  visible: true
  text: |
    package account.controller;

    import account.model.User;
    import account.service.UserAuthenticationService;
    import lombok.AllArgsConstructor;
    import lombok.NoArgsConstructor;
    import lombok.RequiredArgsConstructor;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RequestMapping;
    import org.springframework.web.bind.annotation.RestController;
    import javax.validation.Valid;
    import javax.validation.constraints.NotNull;
    import java.util.Map;

    @RestController
    //@RequiredArgsConstructor
    @RequestMapping("/api/auth")
    public class AuthenticationController {

        private final UserAuthenticationService userAuthService;

        public AuthenticationController(UserAuthenticationService userAuthService) {
            this.userAuthService = userAuthService;
        }

        @PostMapping("/signup")
        public Map<String, String> signup(@Valid @RequestBody User user) {
            return userAuthService.signUp(user);
        }

        @PostMapping("/changepass")
        public void changePass(@Valid User user, @NotNull String password) {

        }
    }
  learner_created: false
- name: src/account/controller/AccountController.java
  visible: true
  text: |
    package account.controller;

    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.PutMapping;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    public class AccountController {

        @GetMapping("api/empl/payment")
        public void payment() {

        }

        @PostMapping("api/acct/payments")
        public void uploadPayments() {

        }

        @PutMapping("api/acct/payments")
        public void updatePayments() {

        }

    }
  learner_created: false
- name: src/account/controller/UserFunctionalityController.java
  visible: true
  text: |
    package account.controller;

    import account.model.User;
    import org.springframework.web.bind.annotation.*;

    import java.util.Locale;

    @RestController
    @RequestMapping("/api/admin")
    public class UserFunctionalityController {

        @PutMapping("/role")
        public void changeRole(String role, User user) {

        }

        @DeleteMapping("/user")
        public void deleteUser() {

        }

        @GetMapping("/user")
        public void getUsers() {

        }
    }
  learner_created: false
- name: src/account/model/User.java
  visible: true
  text: |
    package account.model;

    import lombok.*;
    import org.hibernate.Hibernate;
    import javax.persistence.*;
    import javax.validation.constraints.Email;
    import javax.validation.constraints.NotEmpty;
    import javax.validation.constraints.NotNull;
    import javax.validation.constraints.Pattern;
    import java.util.*;

    @ToString
    @RequiredArgsConstructor
    @Entity
    public class User {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        @Column(name = "id", nullable = false)
        private Long id;

        @Column(name = "name")
        @NotEmpty
        @NotNull
        private String name;

        @Column(name = "last_name")
        @NotEmpty
        @NotNull
        private String lastname;

        @Email(message = "Please add valid email")
        @Pattern(regexp = "\\w+@acme.com", message = "Invalid email")
        @Column(name = "email")
        @NotEmpty
        @NotNull
        private String email;

        @NotEmpty
        @NotNull
        @Column(name = "password")
        private String password;

        @Column(name = "role")
        @ElementCollection
        private Set<String> role = new HashSet<>();

        public Long getId() {
            return id;
        }

        public void setId(Long id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastname) {
            this.lastname = lastname;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public Set<String> getRole() {
            return role;
        }

        public void setRole(Set<String> role) {
            this.role = role;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || Hibernate.getClass(this) != Hibernate.getClass(o)) return false;
            User user = (User) o;
            return id != null && Objects.equals(id, user.id);
        }

        @Override
        public int hashCode() {
            return getClass().hashCode();
        }
    }
  learner_created: false
- name: src/account/model/UserDetailsImpl.java
  visible: true
  text: |
    package account.model;

    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;
    import java.util.Collection;
    import java.util.stream.Collectors;

    public class UserDetailsImpl implements UserDetails {

        private final String username;
        private final String lastname;
        private final String password;
        private final String email;
        private final Collection<SimpleGrantedAuthority> authorities;

        public UserDetailsImpl(User user) {
            this.username = user.getName();
            this.lastname = user.getLastname();
            this.password = user.getPassword();
            this.email = user.getPassword();
            this.authorities = user.getRole().stream()
                    .map(SimpleGrantedAuthority::new)
                    .collect(Collectors.toSet());
        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return authorities;
        }

        @Override
        public String getPassword() {
            return password;
        }

        @Override
        public String getUsername() {
            return username;
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }

        public String getLastname() {
            return lastname;
        }

        public String getEmail() {
            return email;
        }
    }
  learner_created: false
- name: src/account/service/UserDetailsServiceImpl.java
  visible: true
  text: |
    package account.service;

    import account.model.User;
    import account.model.UserDetailsImpl;
    import account.repository.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.core.userdetails.UsernameNotFoundException;
    import org.springframework.stereotype.Service;

    @Service
    public class UserDetailsServiceImpl implements UserDetailsService {

        @Autowired
        UserRepository userRepo;

        @Override
        public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
            User user = userRepo.findByName(username).orElseThrow(() ->
                    new UsernameNotFoundException("User not found: " + username));
            return new UserDetailsImpl(user);
        }
    }
  learner_created: false
- name: src/account/repository/UserRepository.java
  visible: true
  text: |
    package account.repository;

    import account.model.User;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;
    import java.util.Optional;

    @Repository
    public interface UserRepository extends CrudRepository<User, Long> {
        Optional<User> findByName(String name);
        boolean existsByEmail(String lastname);
        boolean existsByNameAndLastname(String name, String lastname);
    }
  learner_created: false
- name: src/account/security/SecurityConfig.java
  visible: true
  text: |
    package account.security;

    import account.service.UserDetailsServiceImpl;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.http.HttpMethod;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;

    @EnableWebSecurity
    public class SecurityConfig extends WebSecurityConfigurerAdapter {

        @Autowired
        UserDetailsServiceImpl userDetailsService;

        @Override
        protected void configure(AuthenticationManagerBuilder auth) throws Exception {
            auth
                    .userDetailsService(userDetailsService)
                    .passwordEncoder(getEncoder());
        }

        @Override
        protected void configure(HttpSecurity http) throws Exception {
            http
                    .csrf().disable().headers().frameOptions().disable()
                    .and()
                    .httpBasic()
                    .and()
                    .authorizeRequests()
                    .mvcMatchers(HttpMethod.POST, "api/auth/signup").anonymous()
                    .mvcMatchers(HttpMethod.POST, "api/auth/changepass").hasAnyRole("USER", "ACCOUNTANT", "ADMIN")
                    .mvcMatchers(HttpMethod.GET, "api/empl/payment").hasAnyRole("USER", "ACCOUNTANT")
                    .mvcMatchers( "api/acct/**").hasAnyRole("ACCOUNTANT")
                    .mvcMatchers( "api/admin/**").hasAnyRole("ADMIN");
        }

        @Bean
        PasswordEncoder getEncoder() {
            return new BCryptPasswordEncoder();
        }
    }
  learner_created: false
- name: src/account/service/UserAuthenticationService.java
  visible: true
  text: |
    package account.service;

    import account.model.User;
    import account.repository.UserRepository;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.stereotype.Component;
    import org.springframework.stereotype.Service;
    import org.springframework.web.server.ResponseStatusException;
    import java.util.Map;

    @Service
    @Component
    public class UserAuthenticationService {

        @Autowired
        UserRepository userRepo;

        @Autowired
        PasswordEncoder passwordEncoder;

        public Map<String, String> signUp(User user) {
            if (userRepo.existsByNameAndLastname(user.getName(), user.getLastname())
                    ^ userRepo.existsByEmail(user.getEmail())) {
                throw new ResponseStatusException(HttpStatus.BAD_REQUEST);
            }
            user.setPassword(passwordEncoder.encode(user.getPassword()));
            userRepo.save(user);
            return Map.of("name", user.getName(),
                    "lastname", user.getLastname(),
                    "email", user.getEmail());
        }
    }
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |-
    import account.AccountServiceApplication;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import java.util.*;
    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class User {
      private String name;
      private String lastname;
      private String email;
      private String password;

      public User(User another) {
        this(another.name, another.lastname, another.email, another.password);
      }

      public User(String name, String lastname, String email, String password) {
        this.name = name;
        this.lastname = lastname;
        this.email = email;
        this.password = password;
      }

      public String toJson() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        try {
          return mapper.writeValueAsString(this);
        } catch (JsonProcessingException e) {
          System.out.println(e.getMessage());
          return null;
        }
      }

      public String getName() {
        return name;
      }

      public User setName(String name) {
        this.name = name;
        return this;
      }

      public String getLastname() {
        return lastname;
      }

      public User setLastname(String lastname) {
        this.lastname = lastname;
        return this;
      }

      public String getEmail() {
        return email;
      }

      public User setEmail(String email) {
        this.email = email;
        return this;
      }

      public String getPassword() {
        return password;
      }

      public User setPassword(String password) {
        this.password = password;
        return this;
      }
    }

    public class AccountServiceTest extends SpringTest {

      private  final String signUpApi = "/api/auth/signup";
      private  final String paymentApi = "/api/empl/payment";
      private final User johnDoe = new User("John", "Doe", "JohnDoe@acme.com", "secret");
      private final User maxMustermann = new User("Max", "Mustermann", "MaxMustermann@acme.com", "secret");
      private final User captainNemo = new User("Captain", "Nemo", "nautilus@pompilius.com", "wings");
      private final String johnDoeCorrectUser = johnDoe.toJson();
      private final String johnDoeEmptyName = new User(johnDoe).setName("").toJson();
      private final String johnDoeNoName = new User(johnDoe).setName(null).toJson();
      private final String johnDoeEmptyLastName = new User(johnDoe).setLastname("").toJson();
      private final String johnDoeNoLastName = new User(johnDoe).setLastname(null).toJson();
      private final String johnDoeEmptyEmail = new User(johnDoe).setEmail("").toJson();
      private final String johnDoeNoEmail = new User(johnDoe).setLastname(null).toJson();
      private final String johnDoeEmptyPassword = new User(johnDoe).setPassword("").toJson();
      private final String johnDoeNoPassword = new User(johnDoe).setPassword(null).toJson();
      private final String johnDoeWrongEmail1 = new User(johnDoe).setEmail("johndoeacme.com").toJson();
      private final String johnDoeWrongEmail2 = new User(johnDoe).setEmail("johndoe@google.com").toJson();
      private final String maxMustermannCorrectUser = maxMustermann.toJson();
      private final String johnDoeCorrectUserLower = new User(johnDoe).setEmail(johnDoe.getEmail().toLowerCase()).toJson();
      private final String maxMustermannCorrectUserLower = new User(maxMustermann).setEmail(maxMustermann.getEmail().toLowerCase()).toJson();
      private final String johnDoeWrongPassword = new User(johnDoe).setPassword("none").toJson();
      private final String johnDoeWrongPasswordCaseSensitive = new User(johnDoe).setPassword(johnDoe.getPassword().toUpperCase()).toJson();
      private final String maxMustermannWrongPassword = new User(maxMustermann).setPassword("none").toJson();
      private final String captainNemoWrongUser = captainNemo.toJson();

      List<Integer> userIdList = new ArrayList<>();

      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      /**
       * Method for checking status code of response Post request for API
       *
       * @param api testing api (String)
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostApi(String api, String body, int status, String message) {
        HttpResponse response = post(api, body).send();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("POST " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n"
                  + "Request body:\n" + body);
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking status code of response Get request for API
       *
       * @param api testing api (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testGetApi(String api, int status, String message) {
        HttpResponse response = get(api).send();

        if (response.getStatusCode() != status) {
          return CheckResult.wrong("GET " + api + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message);
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking response on Post request for signup API
       *
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostSignUpResponse(String body, int status) {
        HttpResponse response = post(signUpApi, body).send();
        testPostApi(signUpApi, body, status, "API must be available");

        JsonObject rightResponse = getJson(body).getAsJsonObject();
        rightResponse.remove("password");

        // Check is it JSON in response or something else
        if (!response.getJson().isJsonObject()) {
          return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonObject jsonResponse = response.getJson().getAsJsonObject();

        // Check if password is presence in response
        if (jsonResponse.get("password") != null) {
          return CheckResult.wrong("You must remove password from response\n" +
                  jsonResponse);
        }

        if (!jsonResponse.get("email").getAsString().endsWith("@acme.com")) {
          return CheckResult.wrong("Service must accept only corporate emails that end with @acme.com\n" +
                  jsonResponse);
        }

        if (jsonResponse.get("id") == null) {
          return CheckResult.wrong("Response must contain user ID\n" +
                  "Received response:\n" +
                  jsonResponse);
        }

        if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
          return CheckResult.wrong("User ID must be unique!\n" +
                  "Received response:\n" +
                  jsonResponse);
        }
        rightResponse.addProperty("id", jsonResponse.get("id").toString());
        // Check JSON in response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("id", isInteger())
                        .value("name", rightResponse.get("name").getAsString())
                        .value("lastname", rightResponse.get("lastname").getAsString())
                        .value("email", rightResponse.get("email").getAsString().toLowerCase()));
        userIdList.add(jsonResponse.get("id").getAsInt());
        return CheckResult.correct();
      }

      /**
       * Method for restarting application
       *
       */
      private CheckResult restartApplication() {
        try {
          reloadSpring();
        } catch (Exception ex) {
          throw new UnexpectedError(ex.getMessage());
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking authentication
       *
       * @param user string representation of user information in JSON format (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserRegistration(String user, int status, String message) {
        JsonObject userJson = getJson(user).getAsJsonObject();
        String password = userJson.get("password").getAsString();
        String login = userJson.get("email").getAsString();
        HttpResponse response = get(paymentApi).basicAuth(login, password).send();
        if (response.getStatusCode() != status) {
          return CheckResult.wrong("Get " + paymentApi + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Authentication with " + login + " / " + password);
        }
        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("id", isInteger())
                          .value("name", userJson.get("name").getAsString())
                          .value("lastname", userJson.get("lastname").getAsString())
                          .value("email", userJson.get("email").getAsString().toLowerCase()));
        }
        return CheckResult.correct();
      }

      /**
       * Method for testing duplicate users
       *
       * @param user string representation of user information in JSON format (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserDuplicates(String user) {
        HttpResponse response = post(signUpApi, user).send();
        // Check error message field in JSON response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("status", 400)
                        .value("error", "Bad Request")
                        .value("message", "User exist!")
                        .anyOtherValues());
        return CheckResult.correct();
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[] {

              // Test user registration on signup api
              () -> testPostSignUpResponse(johnDoeCorrectUser, 200),
              () -> testPostApi(signUpApi, johnDoeCorrectUser, 400, "User must be unique!"),
              () -> testUserDuplicates(johnDoeCorrectUser),
              () -> testPostApi(signUpApi, johnDoeCorrectUserLower, 400, "User must be unique (ignorecase)!"),
              () -> testPostSignUpResponse(maxMustermannCorrectUserLower, 200),
              () -> testPostApi(signUpApi, maxMustermannCorrectUserLower, 400, "User must be unique!"),
              () -> testPostApi(signUpApi, maxMustermannCorrectUser, 400, "User must be unique (ignorecase)!"),

              // Test wrong POST request for signup api
              () -> testPostApi(signUpApi, johnDoeEmptyName, 400, "Empty name field!"),
              () -> testPostApi(signUpApi, johnDoeNoName, 400, "Name field is absent!"),
              () -> testPostApi(signUpApi, johnDoeEmptyLastName, 400, "Empty lastname field!"),
              () -> testPostApi(signUpApi, johnDoeNoLastName, 400, "Lastname field is absent!"),
              () -> testPostApi(signUpApi, johnDoeEmptyEmail, 400, "Empty email field!"),
              () -> testPostApi(signUpApi, johnDoeNoEmail, 400, "Email field is absent!"),
              () -> testPostApi(signUpApi, johnDoeEmptyPassword, 400, "Empty password field!"),
              () -> testPostApi(signUpApi, johnDoeNoPassword, 400, "Password field is absent!"),
              () -> testPostApi(signUpApi, johnDoeWrongEmail1, 400, "Wrong email!"),
              () -> testPostApi(signUpApi, johnDoeWrongEmail2, 400, "Wrong email!"),

              // Test authentication, positive tests
              () -> testUserRegistration(johnDoeCorrectUserLower, 200, "User must login!"),
              () -> testUserRegistration(johnDoeCorrectUser, 200, "Login case insensitive!"),
              () -> testUserRegistration(maxMustermannCorrectUserLower, 200, "User must login!"),
              () -> testUserRegistration(maxMustermannCorrectUser, 200, "Login case insensitive!"),

              // Test authentication, negative tests
              () -> testUserRegistration(johnDoeWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(johnDoeWrongPasswordCaseSensitive, 401,
                      "Password must be case sensitive!"),
              () -> testUserRegistration(johnDoeWrongEmail1, 401, "Wrong user!"),
              () -> testUserRegistration(maxMustermannWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"),
              () -> testGetApi(paymentApi, 401, "This api only for authenticated user"),

              // Test persistence
              () -> restartApplication(),
              () -> testUserRegistration(johnDoeCorrectUser, 200, "User must login, after restarting!" +
                      " Check persistence."),
      };
    }
  learner_created: false
- name: src/account/service/AccountService.java
  visible: true
  learner_created: true
- name: src/account/security/RestAuthenticationEntryPoint.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/217/stages/1087/implement#comment
status: Solved
record: 1
